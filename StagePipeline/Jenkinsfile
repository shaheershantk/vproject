pipeline {
    
	agent any
/*	
	tools {
        maven "maven3"
    }
*/	
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "172.31.40.209:8081"
        NEXUS_REPOSITORY = "vprofile-release"
	NEXUS_REPOGRP_ID    = "vprofile-grp-repo"
        NEXUS_CREDENTIAL_ID = "nexuslogin"
        ARTVERSION = "${env.BUILD_ID}"
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        registryCredential = 'ecr:ap-south-1:awscreds'
        appRegistry = '812004463937.dkr.ecr.ap-south-1.amazonaws.com/vprofileappimg' //uri repo name created in ecr
        vprofileRegistry = 'https://812004463937.dkr.ecr.ap-south-1.amazonaws.com'   //https without repo name for docker login
    }
	
    stages{
        
        stage('BUILD'){
            steps {
                
                sh 'mvn -s settings.xml clean install -DskipTests'
            }
            post {
                success {
                    echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }

	stage('UNIT TEST'){
            steps {
                sh 'mvn -s settings.xml test -DskipTests'
            }
        }

	stage('INTEGRATION TEST'){
            steps {
                sh 'mvn -s settings.xml verify -DskipTests'
            }
        }
		
        stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result.'
                }
            }
        }

        stage('Build app image') {
            steps {
                script {
                    dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER" , "./Docker-files/app/multistage/")
                }
            }
        }
        stage('Upload APP image') {
            steps {
                script {
                    docker.withRegistry( vprofileRegistry,registryCredential){
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage('Show username and password') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'ecr:ap-south-1:awscreds', passwordVariable: 'password', usernameVariable: 'user')]) {
                  echo 'Username is' $user  
                }
            }
        }


        


    }


}

